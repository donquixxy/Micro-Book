// Code generated by MockGen. DO NOT EDIT.
// Source: module/service/books.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	entity "micro-book/domain/entity"
	request "micro-book/domain/request"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookService) CreateBook(ctx context.Context, book *request.CreateBookRequest) (*entity.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(*entity.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookServiceMockRecorder) CreateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookService)(nil).CreateBook), ctx, book)
}

// CreateCategory mocks base method.
func (m *MockBookService) CreateCategory(ctx context.Context, category string) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockBookServiceMockRecorder) CreateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockBookService)(nil).CreateCategory), ctx, category)
}

// CreateGenre mocks base method.
func (m *MockBookService) CreateGenre(ctx context.Context, genre string) (*entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", ctx, genre)
	ret0, _ := ret[0].(*entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockBookServiceMockRecorder) CreateGenre(ctx, genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockBookService)(nil).CreateGenre), ctx, genre)
}

// GetAll mocks base method.
func (m *MockBookService) GetAll(ctx context.Context) ([]*entity.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBookServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookService)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockBookService) GetByID(ctx context.Context, id string) (*entity.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookService)(nil).GetByID), ctx, id)
}

// GetByIDCategory mocks base method.
func (m *MockBookService) GetByIDCategory(ctx context.Context, idCategory string) ([]*entity.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDCategory", ctx, idCategory)
	ret0, _ := ret[0].([]*entity.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDCategory indicates an expected call of GetByIDCategory.
func (mr *MockBookServiceMockRecorder) GetByIDCategory(ctx, idCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDCategory", reflect.TypeOf((*MockBookService)(nil).GetByIDCategory), ctx, idCategory)
}

// Update mocks base method.
func (m *MockBookService) Update(ctx context.Context, v *request.UpdateBookRequest) (*entity.Books, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, v)
	ret0, _ := ret[0].(*entity.Books)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookServiceMockRecorder) Update(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookService)(nil).Update), ctx, v)
}
